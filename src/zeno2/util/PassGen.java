package zeno2.util;import java.util.Date;public class PassGen  {    /*      * Generate password from a "template" string, where each     * character in the string is one of:     *      * A Letter, A to Z      * 9 Digit, 0 to 9      * C Alphanumeric, 0 to 9, A to Z      * H Hexadecimal (base 16) digit, 0 to 9, A to F      * S Syllable, alternating consonant or vowel      * 6 Dice throw, 1 - 6      *     * For example, the template 9 AAA 999 produces passwords in      * "license-plate" format:     *     * 3 WBF 968     * 1 JUM 807     * 4 GEO 819     * 2 TRN 032     *     * Adapted from GNU code by Arnold G. Reinhold.     * See http://www.world.std.com/~reinhold/passgen.html     */    static final boolean debug = false;    static boolean consonantNext = true;    static long prevWhen = 0;    long ranPool=0x67452301efcdab89L; //initial value from MD5 (see stir)     String template = "CCCCCCCC";    StringBuffer password;    public String generate() {	password = new StringBuffer();	addChars();  // do it	return password.toString();    }	    /**     * maintain a pool of randomness using a modified 64-bit congruential      * generator with multipliers dynamiclly selected from a set of      * pseudo-random values.     */    private void stir (long x) {	// The following 31 constants are the first 62 "magic" numbers	// from the MD5 algorithm, RFC1321, concatenated in pairs to	// form 64-bit Java long words.  Any random 64-bit values	// would do, but these were selected from a public source for	// added user confidence.  The stir algorithm itself has	// nothing to do with MD5.  agr 270996	long p[] =	{0xd76aa478e8c7b756L, // 1,2	 0x242070dbc1bdceeeL, // 3,4	 0xf57c0faf4787c62aL, // 5,6	 0xa8304613fd469501L, // 7,8	 0x698098d88b44f7afL, // 8,10	 0xffff5bb1895cd7beL, // 11,12	 0x6b901122fd987193L, // 13,14	 0xa679438e49b40821L, // 15,16	 0xf61e2562c040b340L, // 17,18	 0x265e5a51e9b6c7aaL, // 19,20	 0xd62f105d02441453L, // 21,22	 0xd8a1e681e7d3fbc8L, // 23,24	 0x21e1cde6c33707d6L, // 25,26	 0xf4d50d87455a14edL, // 27,28	 0xa9e3e905fcefa3f8L, // 29,30	 0x676f02d98d2a4c8aL, // 31,32	 0xfffa39428771f681L, // 33,34	 0x6d9d6122fde5380cL, // 35,36	 0xa4beea444bdecfa9L, // 37,38	 0xf6bb4b60bebfbc70L, // 39,40	 0x289b7ec6eaa127faL, // 41,42	 0xd4ef308504881d05L, // 43,44	 0xd9d4d039e6db99e5L, // 45,46	 0x1fa27cf8c4ac5665L, // 47,48	 0xf4292244432aff97L, // 49,50	 0xab9423a7fc93a039L, // 51,52	 0x655b59c38f0ccc92L, // 53,54	 0xffeff47d85845dd1L, // 55,56	 0x6fa87e4ffe2ce6e0L, // 57,58	 0xa30143144e0811a1L, // 59,60	 0xf7537e82bd3af235L};// 61,62	int pIndex;	pIndex = mod(ranPool, p.length);	ranPool = (ranPool + x)*p[pIndex];	pIndex = mod(ranPool, p.length);	ranPool = ranPool ^ p[pIndex];    }	    /**      * x mod y function. Returns positive modulus only.     */    private int mod (long x, long y) {	if (x<0) x=-x;	if (y<0) y=-y;	return (int) (x % y);    }		    /**      * Add random characters to the password as specified by the template      */    private void addChars() {	int ch;	char tmplChar;	consonantNext = true;        int ntmpl = 0;		while (ntmpl < template.length()) {	    stir(new Date().getTime());             ch = ' ';  // initialize	    tmplChar = template.charAt(ntmpl++);	    if (tmplChar == ' ') {		ch = ' ';	    }	    else if (tmplChar == 'A') {		//random letter		ch = mod(ranPool, 26) + (int) 'A';	    }	    else if (tmplChar == 'C') {		//random alphanumeric [0-9,A-Z]		ch =  mod(ranPool, 36);		if (ch < 10) ch = ch + (int) '0';		else ch =  ch + (int) 'A' - 10;	    }	    else if (tmplChar == 'H') {		//random hex digit		ch =  mod(ranPool, 16);		if (ch <10) ch = ch + (int) '0';		else ch =  ch + (int) 'A' - 10;	    }	    else if (tmplChar == 'S') {		//random syllable		addSyllable();	    }	    else if (tmplChar == '6') {		//random dice throw		ch = mod(ranPool, 6) + (int) '1';	    }	    else if (tmplChar == '9') {		//random digit		ch = mod(ranPool, 10) + (int) '0';	    }	    password.append((char) ch);	}    }	    /** Add a random syllable half to the password */    private void addSyllable() {	String consonants[] =	{"b","c","d","f","g","h","j","k","l","m",	 "n","p","qu","r","s","t","v","w","x","z",	 "ch","cr","fr","nd","ng","nk","nt","ph","pr","rd",	 "sh","sl","sp","st","th","tr"};	String vowels[] = {"a","e","i","o","u","y"};	String syl = "";	if (consonantNext) {	    syl = consonants[mod(ranPool, consonants.length)];	    if (syl != "qu") consonantNext = false;	} else {	    syl = vowels[mod(ranPool, vowels.length)];	    consonantNext = true;	}	password.append(syl);    }	}